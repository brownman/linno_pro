cleanup(){
    print func
(    commander_try docker stop $alias_ubuntu 2>/dev/null ) || true
(    commander_try docker rm $alias_ubuntu 2>/dev/null ) || true
    
    #(  docker rm -f $alias_ubuntu 2>/dev/null )
}


docker_run_it(){
    docker_cmd_i="docker run -i   --rm --name=$alias_ubuntu --privileged=false \
        $volume_ssh  \
        $volume_socket \
        $volume_bin \
        $volume_apparmor \
        $volume_tmp \
        $env_ip_host  \
        $ports \
        $container_id  \
        bash"
}

docker_run_i(){
    read -t 10 -p "Hit 'n' or wait ten seconds" answer; [ "$answer" = n ] &&  { cmd_inside="bash -c '$cmd_node'";  }   || {  cmd_inside="bash -c '$cmd_node & disown;  \
        $cmd_bash'";  }
    docker_cmd_it="docker run  -it  --rm --name=$alias_ubuntu --privileged=false \
        $volume_ssh  \
        $volume_socket \
        $volume_bin \
        $volume_apparmor \
        $volume_tmp \
        $env_ip_host \
        $ports \
        $container_id  \
        $cmd_inside"
}

prepare_cfg_and_sh(){
echo "$cmd_node & disown; $cmd_bash" > /tmp/ofer.sh
echo "docker ps | grep $alias_ubuntu && docker attach $alias_ubuntu || true" > /tmp/bashrc
chmod +x /tmp/ofer.sh
}

set_env_docker_cmds(){
    print func
    IP_HOST=$(ip route  get 1  | head -1 | cut -d'c' -f2 | xargs)
    env_ip_host="-e IP_HOST=$IP_HOST"

    HOME_INSIDE=/root
    cmd_node='node /root/wetty/app.js -p 3002'
    cmd_bash="git clone https://github.com/brownman/linno_pro.git; mv /root/linno_pro/* /root;chmod 755 *.sh; ls -la /root; /root/inside.sh"
#& disown; 


    container_id='brownman/linno_pro:master'
    alias_ubuntu="alias_ubuntu"

    #$(date +%s)"
    volume_apparmor='-v /usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0:/usr/lib/x86_64-linux-gnu/libapparmor.so.1:ro'
    volume_ssh="-v $HOME/.ssh:$HOME_INSIDE/.ssh"
    
    volume_tmp="-v /tmp:/tmp"

    volume_socket='-v /var/run/docker.sock:/var/run/docker.sock'
    volume_bin='-v /usr/bin/docker:/usr/bin/docker'
    ports='-p 3002:3002'
}

docker_stop1(){
local name=$1
    commander_try docker stop $name
    commander_try docker rm $name
    commander_try docker rm -f $name

}


mktemp3(){
    local name="$1"
    local timestamp=$(date +%s)
    touch /tmp/${name}_${timestamp}

    echo /tmp/${name}_${timestamp}
}

commander_try()
{ 
set +e
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[try:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd"  
    res="$?";
    indicator $res
    set -e
    return $res
    
}
commander_mute ()
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[atom:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" &>/tmp/out_err  || { echo /tmp/out_err; cat /tmp/out_err; exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}

commander_atom () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[atom:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" || { exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}
commander () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[cmd:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" || { exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}
print () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    printn $cmd;
    echo;
    set +u;
    set +e
}
print_color () 
{ 
    local cmd="print_color_n $@";
    $cmd;
    echo 1>&2
}
print_color_n () 
{ 
    if [ $# -gt 1 ]; then
        local color=$1;
        shift;
        local args="${@:-?}";
        echo -en "\x1B[01;${color}m[*]\x1B[0m ${args} " 1>&2;
    fi
}
exiting(){
local res=$?
indicator $res
exit $res
}
printn () 
{ 
    [ $# -gt 0 ] || { 
        echo "$@";
        return
    };
    local type="$1";
    shift;
    local str="$@";
    local cmd='';
    case "$type" in 
        func)
            local funcname="${FUNCNAME[2]}";
            print line "$funcname:  $str"
        ;;
        trace)
            trace $str
        ;;
        ok)
            print_color 32 ": $str"
        ;;
        color)
            print_color_n $str
        ;;
        error)
            print_color 31 ": $str"
        ;;
        line)
            if [ -n "$str" ]; then
                local str_res=$( echo "$str" | wc -c );
                local str_times=$( times1 "$str_res" "_" );
                echo "                ${str_times}" 1>&2;
                echo -en '_______________/' 1>&2;
                echo -n "$str " 1>&2;
                echo -e '\________________' 1>&2;
            else
                echo -en '_________________' 1>&2;
                echo -e '_________________' 1>&2;
            fi
        ;;
        shlvl)
            print_color_n 33 "[SHLVL] $SHLVL"
        ;;
        caller)
            str="${str:-}";
            print_color_n 36 "[CALLER] $str"
        ;;
        fortune)
            fortune
        ;;
        warning)
            print_color_n 33 "[WARNING!] $str"
        ;;
        pending)
            print_color_n 34 "[PENDING] $str"
        ;;
        **)
            echo "$type $str" 1>&2
        ;;
    esac
}

indicator () 
{ 
    local res_last=${1:-$?};
    local num="${1:-$res_last}";
    if [ $num -eq 0 ]; then
        print ok;
    else
        print error;
    fi;
    return $num
}

trace () 
{ 
    local str="${@:-}";
    local file=/tmp/trace;
    echo -e "[-] $str" 1>&2;
}

times1 () 
{ 
    local num="$1";
    local char="${2:-.}";
    local i=0;
    local res=0;
    while [ $i -lt $num ]; do
        echo -n "$char";
        let 'i+=1';
    done
}

export -f times1
export -f trace
export -f commander_try
export -f print
export -f commander

export -f commander_atom
export -f print_color_n

export -f print_color
export -f indicator
export -f printn
export -f exiting

export -f mktemp3
export -f docker_stop1
export -f set_env_docker_cmds

export -f set_env_docker_cmds
export -f prepare_cfg_and_sh
export -f docker_run_it
export -f docker_run_i


export -f cleanup
