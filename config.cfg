docker_stop1(){
local name=$1
    commander_try docker stop $name
    commander_try docker rm $name
    commander_try docker rm -f $name

}


mktemp3(){
    local name="$1"
    local timestamp=$(date +%s)
    touch /tmp/${name}_${timestamp}

    echo /tmp/${name}_${timestamp}
}

commander_try()
{ 
set +e
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[try:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd"  
    res="$?";
    indicator $res
    set -e
    return $res
    
}
commander_mute ()
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[atom:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" &>/tmp/out_err  || { echo /tmp/out_err; cat /tmp/out_err; exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}

commander_atom () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[atom:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" || { exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}
commander () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    local res;
    print color 34 "[cmd:$SHLVL] $cmd";
echo $cmd >> /tmp/commands
    eval "$cmd" || { exit 1; }
    res="$?";
test $res -eq 1 && {
print error $cmd __/
} 
    return $res
}
print () 
{ 
    local args=($@);
    local cmd="${args[@]}";
    printn $cmd;
    echo;
    set +u;
    set +e
}
print_color () 
{ 
    local cmd="print_color_n $@";
    $cmd;
    echo 1>&2
}
print_color_n () 
{ 
    if [ $# -gt 1 ]; then
        local color=$1;
        shift;
        local args="${@:-?}";
        echo -en "\x1B[01;${color}m[*]\x1B[0m ${args} " 1>&2;
    fi
}
exiting(){
local res=$?
indicator $res
exit $res
}
printn () 
{ 
    [ $# -gt 0 ] || { 
        echo "$@";
        return
    };
    local type="$1";
    shift;
    local str="$@";
    local cmd='';
    case "$type" in 
        func)
            local funcname="${FUNCNAME[2]}";
            print line "$funcname:  $str"
        ;;
        trace)
            trace $str
        ;;
        ok)
            print_color 32 ": $str"
        ;;
        color)
            print_color_n $str
        ;;
        error)
            print_color 31 ": $str"
        ;;
        line)
            if [ -n "$str" ]; then
                local str_res=$( echo "$str" | wc -c );
                local str_times=$( times1 "$str_res" "_" );
                echo "                ${str_times}" 1>&2;
                echo -en '_______________/' 1>&2;
                echo -n "$str " 1>&2;
                echo -e '\________________' 1>&2;
            else
                echo -en '_________________' 1>&2;
                echo -e '_________________' 1>&2;
            fi
        ;;
        shlvl)
            print_color_n 33 "[SHLVL] $SHLVL"
        ;;
        caller)
            str="${str:-}";
            print_color_n 36 "[CALLER] $str"
        ;;
        fortune)
            fortune
        ;;
        warning)
            print_color_n 33 "[WARNING!] $str"
        ;;
        pending)
            print_color_n 34 "[PENDING] $str"
        ;;
        **)
            echo "$type $str" 1>&2
        ;;
    esac
}

indicator () 
{ 
    local res_last=${1:-$?};
    local num="${1:-$res_last}";
    if [ $num -eq 0 ]; then
        print ok;
    else
        print error;
    fi;
    return $num
}

trace () 
{ 
    local str="${@:-}";
    local file=/tmp/trace;
    echo -e "[-] $str" 1>&2;
}

times1 () 
{ 
    local num="$1";
    local char="${2:-.}";
    local i=0;
    local res=0;
    while [ $i -lt $num ]; do
        echo -n "$char";
        let 'i+=1';
    done
}

export -f times1
export -f trace
export -f commander_try
export -f print
export -f commander

export -f commander_atom
export -f print_color_n

export -f print_color
export -f indicator
export -f printn
export -f exiting

export -f mktemp3
export -f docker_stop1
